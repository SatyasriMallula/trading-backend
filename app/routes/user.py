from fastapi import APIRouter, HTTPException
from datetime import timedelta
from app.schemas.user import LoginResponse, LoginRequest
from app.core.auth import create_access_token,create_refresh_token
from app.utils.response_message import response_message
from app.core.database import db_user
from  app.utils.serialize_doc import serialize_doc
import uuid
auth_router=APIRouter(prefix='/api',tags=["Auth"])
# For demo, let's assume only one user exists
fake_user = {
    "username": "admin",
    "password": "admin123" 
}

@auth_router.post("/login")
async def login(request: LoginRequest):
    if request.username != fake_user["username"] or request.password != fake_user["password"]:
        raise HTTPException(status_code=401, detail="Invalid credentials")

    access_token_expires = timedelta(minutes=15)
    access_token = create_access_token(
        data={"sub": request.username}, expires_delta=access_token_expires
    )
    refresh_token = create_refresh_token(data={"sub": request.username})

    user = db_user.get_collection("user")
    user_found = await user.find_one({"username": request.username})

    if not user_found:
        # Create response first to generate UUID
        response = LoginResponse(
            username=request.username,
            access_token=access_token,
            refresh_token=refresh_token
        )
        await user.insert_one({
            "user_id": str(response.id),  # use UUID generated by model
            "username": request.username,
            "password": request.password
        })
    else:
        response = LoginResponse(
            id=uuid.UUID(user_found["user_id"]),  # use existing user_id
            username=request.username,
            access_token=access_token,
            refresh_token=refresh_token
        )

    return response_message(message="Login Successful", data=serialize_doc(response))
